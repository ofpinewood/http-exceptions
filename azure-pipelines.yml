# ASP.NET Core
# Build and test ASP.NET Core web applications targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/dotnet-core

pool:
  vmImage: 'vs2017-win2016'

trigger:
  branches:
    include:
    - main
    - preview
    - refs/tags/*

schedules:
- cron: '0 0 * * *'
  displayName: Daily Build
  always: true
  branches:
    include:
    - main

variables:
  buildConfiguration: 'Release'
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/tags/') }}:
    release: true

steps:
- task: gitversion/setup@0
  displayName: Install GitVersion
  inputs:
    versionSpec: '5.x'

- task: gitversion/execute@0
  displayName: Determine Version

# https://dotnet.microsoft.com/download/dotnet-core/3.1
- task: UseDotNet@2
  displayName: Install .Net Core 3.1.200 LTS
  inputs:
    packageType: 'sdk'
    version: '3.1.200'

# https://dotnet.microsoft.com/download/dotnet/5.0
- task: UseDotNet@2
  displayName: Install .Net Core 5.0.101
  inputs:
    packageType: 'sdk'
    version: '5.0.101'

# https://dotnet.microsoft.com/download/dotnet/6.0
- task: UseDotNet@2
  displayName: Install .Net Core 6.0.100-preview
  inputs:
    packageType: 'sdk'
    version: '6.0.100-preview.3.21202.5'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:Version=$(GitVersion.SemVer)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: |
      **/tests/*.Tests/*.csproj
      **/tests/*.IntegrationTests/*.csproj
    arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --settings coverlet.runsettings'

# Release: triggered by a version tag
- task: DotNetCoreCLI@2
  displayName: NuGet Pack Opw.HttpExceptions
  condition: and(succeeded(), eq(variables['release'], true))
  inputs:
    command: pack
    packagesToPack: '**/Opw.HttpExceptions.csproj'
    nobuild: true
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.NuGetVersion'

- task: DotNetCoreCLI@2
  displayName: NuGet Pack Opw.HttpExceptions.AspNetCore
  condition: and(succeeded(), eq(variables['release'], true))
  inputs:
    command: pack
    packagesToPack: '**/Opw.HttpExceptions.AspNetCore.csproj'
    nobuild: true
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.NuGetVersion'

- task: NuGetCommand@2
  displayName: NuGet Push
  condition: and(succeeded(), eq(variables['release'], true))
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: NuGet
    versioningScheme: byEnvVar
    versionEnvVar: 'GitVersion.NuGetVersion'

- task: GithubRelease@0
  displayName: Create GitHub Release
  condition: and(succeeded(), eq(variables['release'], true))
  inputs:
   gitHubConnection: 'github.com'
   repositoryName: $(Build.Repository.Name)
   action: create
   target: $(Build.SourceVersion)
   tagSource: auto
   tag: '$(GitVersion.SemVer)'

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: 'Generate Code Coverage Report'
  inputs:
    reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    targetdir: '$(build.artifactstagingdirectory)/coverage/'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Results'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(build.artifactstagingdirectory)/coverage/cobertura.xml'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  condition: always()
  inputs:
    PathtoPublish: $(build.artifactstagingdirectory)
