# ASP.NET Core
# Build and test ASP.NET Core web applications targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/dotnet-core

pool:
  vmImage: 'vs2017-win2016'

trigger:
  branches:
    include:
    - master
    - refs/tags/*
  paths:
    include:
    - src/*
    - tests/*
    - samples/*
    - azure-pipelines.yml

variables:
  buildConfiguration: 'Release'

steps:
- task: gittools.gitversion.gitversion-task.GitVersion@3
  displayName: GitVersion
  inputs:
    updateAssemblyInfo: true

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) /p:Version=$(Build.BuildNumber)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: |
      **/tests/*.Tests/*.csproj
      **/tests/*.IntegrationTests/*.csproj
    arguments: '--configuration $(buildConfiguration) --no-build --filter Category!=IntegrationTest /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[Opw.*]*" /p:Exclude="[*.Tests]*"'

# Release: triggered by a version tag
- task: DotNetCoreCLI@2
  displayName: NuGet Pack Opw.HttpExceptions
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    command: pack
    packagesToPack: '**/Opw.HttpExceptions.csproj'
    versioningScheme: byBuildNumber

- task: DotNetCoreCLI@2
  displayName: NuGet Pack Opw.HttpExceptions.AspNetCore
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    command: pack
    packagesToPack: '**/Opw.HttpExceptions.AspNetCore.csproj'
    versioningScheme: byBuildNumber

- task: NuGetCommand@2
  displayName: NuGet Push
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: NuGet
    versioningScheme: byBuildNumber

- task: GithubRelease@0
  displayName: Create GitHub Release
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  inputs:
   gitHubConnection: GitHub
   repositoryName: $(Build.Repository.Name)
   action: create
   target: $(Build.SourceVersion)
   tagSource: auto
   tag: '$(Build.BuildNumber)'
   releaseNotesSource: file
   releaseNotesFile: CHANGELOG.md

# Finalize
- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: Generate Code Coverage Report
  inputs:
    reports: $(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml
    targetdir: $(build.artifactstagingdirectory)/TestResults/
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Results'
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: $(build.artifactstagingdirectory)/TestResults/cobertura.xml
    # To make the task not regenerate the report an environment variable was added to the pipeline in Azure DevOps; "disable.coverage.autogenerate: 'true'"
    # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
    reportDirectory: '$(build.artifactstagingdirectory)/TestResults'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  condition: always()
  inputs:
    PathtoPublish: $(build.artifactstagingdirectory)
